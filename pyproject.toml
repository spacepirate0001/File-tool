[tool.poetry]
name = "file-tool"
version = "0.1.1"
description = "A CLI tool for common file operations"
authors = ["Haytham Amin <haythamelmogazy@gmail.com>"]
readme = "README.md"
packages = [{include = "src"}]
include = ["setup.py"]  # Ensure setup.py is included in the distribution

[tool.poetry.scripts]
file-tool = "src.main:cli"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
click = "^8.1.3"
rich = "^13.3.1"
msgpack = "^1.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
black = "^23.3.0"
isort = "^5.12.0"
mypy = "^1.3.0"
pytest-cov = "^4.1.0"
pyinstaller = "^6.5.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = [
    "."
]
addopts = "-v --cov=src --cov-report=term-missing"
testpaths = [
    "tests"
]
python_files = ["test_*.py"]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "**/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
show_missing = true
fail_under = 80

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
namespace_packages = false
explicit_package_bases = false
mypy_path = []

[[tool.mypy.overrides]]
module = "tests.*"
ignore_missing_imports = true
check_untyped_defs = true

[tool.dynamic-versioning]
enable = true
source = "tag"  # Use Git tags to determine the version