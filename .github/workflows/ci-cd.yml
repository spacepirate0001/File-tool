name: CI/CD

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 1 * * 0'  # Run security scan weekly at 1:30 AM on Sunday  

env:
  POETRY_VERSION: "1.7.1"

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --no-interaction --with dev
      
      - name: Run tests
        run: poetry run pytest --cov=src --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      
      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-lint-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --no-interaction --with dev
      
      - name: Lint
        run: |
          poetry run black --check src tests
          poetry run isort --check-only src tests
          poetry run mypy src

  build-and-release:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    # environment:
    #   name: file-tool-env
    #   url: https://pypi.org/p/file-tool-sai
    permissions:
      contents: write
      # id-token: write 
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry install --with dev
          pip install stdeb
          sudo apt-get update
          sudo apt-get install -y python3-stdeb dh-python upx

      - name: Build Python packages
        run: |
          # Extract version from tag
          if [[ "$GITHUB_REF" =~ ^refs/tags/v([0-9]+(\.[0-9]+)*([-a-zA-Z0-9\.]*)?)$ ]]; then
            VERSION=${BASH_REMATCH[1]}
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "Extracted version: $VERSION"
            poetry version $VERSION
          else
            echo "Invalid version format in GITHUB_REF: $GITHUB_REF"
            exit 1
          fi
          
          # Build source distribution and wheel
          poetry build
          
          # # Verify built packages
          # echo "Contents of dist directory:"
          # ls -la dist/
          # for f in dist/*; do
          #   echo "Verifying $f"
          #   pip install twine
          #   twine check "$f"
          # done
      
      - name: Build Executable
        run: |
          mkdir -p artifacts
          poetry run pyinstaller file-tool.spec --clean
          
          cd dist
          tar -czf ../artifacts/file-tool-${VERSION}-linux-x64.tar.gz file-tool
          cd ..
          
          echo "Executable artifacts:"
          ls -la artifacts/
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz
            artifacts/*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # - name: Publish to PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     verbose: true
      #     print-hash: true
      #     packages-dir: dist
      #     repository-url: https://pypi.org/p/file-tool-sai