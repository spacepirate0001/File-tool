name: CI/CD

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

env:
  POETRY_VERSION: "1.7.1"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --with dev
    
    - name: Run tests
      run: |
        source .venv/bin/activate
        pytest --cov=src --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
        cache: 'pip'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-lint-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --with dev
    
    - name: Run black
      run: |
        source .venv/bin/activate
        black --check src tests
    
    - name: Run isort
      run: |
        source .venv/bin/activate
        isort --check-only src tests
    
    - name: Run mypy
      run: |
        source .venv/bin/activate
        mypy src

  build-and-release:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for accurate versioning
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
        cache: 'pip'
    
    - name: Install Poetry and build dependencies
      run: |
        pip install poetry==${{ env.POETRY_VERSION }}
        sudo apt-get update
        sudo apt-get install -y python3-stdeb dh-python
    
    - name: Build Python package
      run: poetry build
    
    - name: Build Debian package
      run: |
        # Extract version from the tag
        VERSION=${GITHUB_REF#refs/tags/v}
        
        # Update version in pyproject.toml
        poetry version $VERSION
        
        # Create .deb package
        py2dsc-deb dist/*.tar.gz
        
        # Move the .deb file to dist directory
        mv deb_dist/*.deb dist/
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.whl
          dist/*.tar.gz
          dist/*.deb
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # - name: Publish to PyPI
    #   if: success()
    #   env:
    #     POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
    #   run: poetry publish